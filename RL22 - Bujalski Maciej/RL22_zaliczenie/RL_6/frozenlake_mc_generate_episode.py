# -*- coding: utf-8 -*-
"""FrozenLake_MC_generate_episode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iCDuzIEyzSdChMz3C090rxw4Djj5cHJO

# **FrozenLake - generacja epizodu**
"""

import gym
import numpy as np
import random

env = gym.make("FrozenLake-v0", map_name='4x4', is_slippery=False)

"""Funkcja generująca politykę stochastyczną:"""

def create_random_sto_policy(env):
    policy = {}
    for key in range(0, env.observation_space.n):
        p = {}
        for action in range(0, env.action_space.n):
            p[action] = 1 / env.action_space.n
        policy[key] = p
    return policy

"""Testujemy:"""

policy = create_random_sto_policy(env)
policy

"""Funkcja generująca epizod:"""

def generate_episode(env, policy):
    env.reset()
    episode = []
    finished = False

    while not finished:
        s = env.s  

        timestep = []
        timestep.append(s)
        
        n = random.uniform(0, sum(policy[s].values()))
        
        top_range = 0
        for prob in policy[s].items():
            top_range += prob[1]
            if n < top_range:
                action = prob[0]
                break
        
        #observation, reward, done, info
        _, reward, finished, _ = env.step(action)
        
        timestep.append(action)
        timestep.append(reward)

        episode.append(timestep)
        
    return episode

"""Testujemy:"""

print("LEFT = 0 DOWN = 1 RIGHT = 2 UP = 3")
for i in range(100):
  print("Epizod ",i,": ",generate_episode(env, policy))